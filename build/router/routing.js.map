{"version":3,"file":"routing.js","sourceRoot":"","sources":["../../src/router/routing.ts"],"names":[],"mappings":";;AACA,8DAAqE;AACrE,8CAAoF;AACpF,MAAM,MAAM,GAAW,OAAO,CAAC,SAAS,CAAC,CAAC,MAAM,EAAE,CAAC;AACnD,yDAAqD;AAIrD,MAAM,sBAAsB,GAAG,IAAI,qCAAsB,EAAE,CAAC;AAE5D,MAAM,kBAAkB,GAAG,KAAK,EAAE,GAAY,EAAE,GAAa,EAAE,EAAE;IAC7D,MAAM,MAAM,GAAG,IAAA,oCAAgB,EAAC,GAAG,CAAC,CAAC;IAErC,IAAI,CAAC,MAAM,CAAC,OAAO,EAAE,EAAE;QACnB,OAAO,GAAG,CAAC,MAAM,CAAC,GAAG,CAAC,CAAC,IAAI,CAAC,EAAE,MAAM,EAAE,MAAM,CAAC,KAAK,EAAE,EAAE,CAAC,CAAC;KAC3D;IAED,MAAM,aAAa,GAAG,GAAG,CAAC,KAAK,CAAC,MAAM,CAAC;IAEvC,MAAM,WAAW,GAAG,MAAM,sBAAsB,CAAC,kBAAkB,CAAC,aAAa,CAAC,CAAC;IACvF,OAAO,CAAC,GAAG,CAAC,qBAAqB,EAAE,WAAW,CAAC,CAAA;IAC3C,OAAO,GAAG,CAAC,MAAM,CAAC,GAAG,CAAC,CAAC,IAAI,CAAC,WAAW,CAAC,CAAC;IAE3C,qCAAqC;AACvC,CAAC,CAAC;AAEF,MAAM,iBAAiB,GAAG,KAAK,EAAE,GAAY,EAAE,GAAa,EAAE,EAAE;IAC5D,MAAM,MAAM,GAAG,IAAA,oCAAgB,EAAC,GAAG,CAAC,CAAC;IACvC,iFAAiF;IAC/E,IAAI,CAAC,MAAM,CAAC,OAAO,EAAE,EAAE;QACnB,OAAO,GAAG,CAAC,MAAM,CAAC,GAAG,CAAC,CAAC,IAAI,CAAC,EAAE,MAAM,EAAE,MAAM,CAAC,KAAK,EAAE,EAAE,CAAC,CAAC;KAC3D;IAED,MAAM,kBAAkB,GAAG,MAAM,sBAAsB,CAAC,iBAAiB,CAAC,GAAG,CAAC,IAAI,CAAC,CAAC;IAEpF,GAAG,CAAC,MAAM,CAAC,GAAG,CAAC,CAAC,IAAI,CAAC,kBAAkB,CAAC,CAAC;AAC7C,CAAC,CAAC;AAEF,MAAM,OAAO,GAAG,KAAK,EAAE,GAAY,EAAE,GAAa,EAAE,EAAE;IAClD,iFAAiF;IACjF,GAAG,CAAC,MAAM,CAAC,GAAG,CAAC,CAAC,IAAI,CAAC,SAAS,CAAC,CAAC;AACpC,CAAC,CAAC;AAEF,MAAM,CAAC,GAAG,CAAC,eAAe,EAAE,oCAAuB,EAAE,kBAAkB,CAAC,CAAC;AACzE,MAAM,CAAC,IAAI,CAAC,eAAe,EAAE,uCAA0B,EAAE,iBAAiB,CAAC,CAAC;AAC5E,MAAM,CAAC,IAAI,CAAC,UAAU,EAAE,OAAO,CAAC,CAAC;AAEjC,kBAAe,MAAM,CAAC","sourcesContent":["import { Request, Response, Router } from 'express';\nimport { ParticipantsController } from '../controllers/participants';\nimport { getParticipantValidator, createParticipantValidator } from '../validators';\nconst router: Router = require('express').Router();\nimport { validationResult } from 'express-validator';\n\n\n\nconst participantsController = new ParticipantsController();\n\nconst getParticipantById = async (req: Request, res: Response) => {\n    const errors = validationResult(req);\n\n    if (!errors.isEmpty()) {\n        return res.status(400).json({ errors: errors.array() });\n    }\n\n    const participantId = req.query.userId;\n\n    const participant = await participantsController.getParticipantById(participantId);\nconsole.log('getParticipantById ', participant)\n    return res.status(200).send(participant);\n\n  // res.status(200).send(allCashiers);\n};\n\nconst createParticipant = async (req: Request, res: Response) => {\n    const errors = validationResult(req);\n  // const createdCashier: ICashier = await cashiersService.create(req.body.title);\n    if (!errors.isEmpty()) {\n        return res.status(400).json({ errors: errors.array() });\n    }\n\n    const createdParticipant = await participantsController.createParticipant(req.body);\n\n    res.status(200).send(createdParticipant);\n};\n\nconst shuffle = async (req: Request, res: Response) => {\n    // const createdCashier: ICashier = await cashiersService.create(req.body.title);\n    res.status(200).send('shuffle');\n};\n\nrouter.get('/participants', getParticipantValidator, getParticipantById);\nrouter.post('/participants', createParticipantValidator, createParticipant);\nrouter.post('/shuffle', shuffle);\n\nexport default router;\n"]}