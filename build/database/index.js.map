{"version":3,"file":"index.js","sourceRoot":"","sources":["../../src/database/index.ts"],"names":[],"mappings":";;;;;;AAAA,MAAM,OAAO,GAAG,OAAO,CAAC,SAAS,CAAC,CAAC,OAAO,EAAE,CAAC;AAC7C,MAAM,SAAS,GAAG,OAAO,CAAC,WAAW,CAAC,CAAC;AACvC,gDAAwB;AAGxB,IAAI,EAAO,CAAC;AACZ,IAAI,SAAc,CAAC;AAEnB,MAAM,SAAS,GAAG,KAAK,IAAI,EAAE;IACzB,EAAE,GAAG,IAAI,OAAO,CAAC,QAAQ,CAAC,cAAI,CAAC,IAAI,CAAC,GAAG,SAAS,cAAc,EAAE,iBAAiB,CAAC,CAAC,CAAC;IAEpF,EAAE,CAAC,SAAS,CAAC,GAAG,EAAE;QACd,EAAE,CAAC,GAAG,CAAC,+GAA+G,CAAC,CAAC;IAC5H,CAAC,CAAC,CAAC;IAEH,SAAS,GAAG,IAAI,SAAS,CAAC;QACtB,OAAO,EAAE,QAAQ;QACjB,OAAO,EAAE,mBAAmB;KAC/B,CAAC,CAAC;AACP,CAAC,CAAC;AAOO,8BAAS;AALlB,MAAM,KAAK,GAAG,GAAG,EAAE;IACf,OAAO,EAAE,CAAC;AACd,CAAC,CAAC;AAGkB,sBAAK","sourcesContent":["const sqlite3 = require('sqlite3').verbose();\nconst Sequelize = require('sequelize');\nimport path from 'path';\n\n\nlet db: any;\nlet sequelize: any;\n\nconst connectDB = async () => {\n    db = new sqlite3.Database(path.join(`${__dirname}/../database`, 'participants.db'));\n\n    db.serialize(() => {\n        db.run('CREATE TABLE IF NOT EXISTS participants(ID INTEGER PRIMARY KEY AUTOINCREMENT, firstName TEXT, lastName TEXT )');\n    });\n\n    sequelize = new Sequelize({\n        dialect: 'sqlite',\n        storage: './participants.db'\n    });\n};\n\nconst getDB = () => {\n    return db;\n};\n\n\nexport { connectDB, getDB };\n"]}